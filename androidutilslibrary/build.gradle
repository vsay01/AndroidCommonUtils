//Step I: Add the below line
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'com.novoda.bintray-release'

//Step II: Add the below publish details
/*publish {
    def groupProjectID = 'com.vsay01.utils'
    def artifactProjectID = 'androidcommonutils'
    def publishVersionID = '1.1.0'

    userOrg = 'vsay01'
    repoName = 'androidcommonutils'
    groupId = groupProjectID
    artifactId = artifactProjectID
    publishVersion = publishVersionID
    desc = 'Collections of practical Android common utils classes for Android developer.'
    website = 'https://github.com/vsay01/AndroidCommonUtils'
}*/
//apply plugin: 'maven-publish'
//
//task androidJavadocs(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    android.libraryVariants.all { variant ->
//        if (variant.name == 'release') {
//            owner.classpath += variant.javaCompileProvider.get().classpath
//        }
//    }
//    exclude '**/R.html', '**/R.*.html', '**/index.html'
//}
//
//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    archiveClassifier.set('javadoc')
//    from androidJavadocs.destinationDir
//}
//
//task androidSourcesJar(type: Jar) {
//    archiveClassifier.set('sources')
//    from android.sourceSets.main.java.srcDirs
//}
//
//// Because the components are created only during the afterEvaluate phase, you must
//// configure your publications using the afterEvaluate() lifecycle method.
//afterEvaluate {
//    publishing {
//        publications {
//            // Creates a Maven publication called "release".
//            release(MavenPublication) {
//                // Applies the component for the release build variant.
//                from components.release
//
//                // Adds javadocs and sources as separate jars.
//                artifact androidJavadocsJar
//                artifact androidSourcesJar
//
//                // You can customize attributes of the publication here or in module's build.gradle file (if you save this as script and include it build.gradle file, then you can just replicate this whole block there only with changed fields).
//                groupId = 'com.vsay01.utils'
//                artifactId = 'androidcommonutils'
//                version = '1.1.0'
//            }
//        }
//    }
//}

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /*libraryVariants.all { variant ->
        // create tasks to generate Javadocs
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            source = variant.javaCompile.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

            // choose the destination that works best for you here
            // I chose this particular directory because Jenkins pulls reports
            // from this directory already if you need to have the output
            // folder be parameterized for the build variant, use
            // "build/outputs/docs/javadoc-${variant.name}/" instead and it'll
            // be in `javadoc-productionRelease` for example
            destinationDir = file("build/outputs/docs/javadoc/")

            // the name that will appear in the docs
            title = rootProject.name

            // you will probably get errors from using the @annotations and
            // the support library, so just turn off failing for errors
            failOnError false
        }
    }*/
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation "androidx.core:core-ktx:1.2.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

/*
ext {
    bintrayRepo = 'maven'
    bintrayName = 'androidcommonutils'

    publishedGroupId = 'com.vsay01.utils'
    libraryName = 'AndroidCommonUtils'
    artifact = 'androidcommonutils'

    libraryDescription = 'Collections of practical Android common utils classes for developer'

    siteUrl = 'https://github.com/vsay01/AndroidCommonUtils'
    gitUrl = 'https://github.com/vsay01/AndroidCommonUtils.git'

    libraryVersion = '1.1.0'

    developerId = 'vsay01'
    developerName = 'Vortana Say'
    developerEmail = 'sayvortana.itc@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

tasks.withType(Javadoc).all { enabled = false }

apply from: "maven_install.gradle"
repositories {
    mavenCentral()
}*/
